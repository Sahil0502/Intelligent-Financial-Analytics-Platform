server:
  port: 8080
  servlet:
    context-path: /api

spring:
  application:
    name: financial-analytics-platform
  
  # Production PostgreSQL Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:postgres}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:test123}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Redis for caching (optional)
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

# Financial API Configuration
finnhub:
  api:
    key: ${FINNHUB_API_KEY:d2go7v1r01qq1lhvukcgd2go7v1r01qq1lhvukd0}
    base-url: https://finnhub.io/api/v1

# CORS Configuration
cors:
  allowed-origins: ${ALLOWED_ORIGINS:http://localhost:3000,https://yourdomain.com}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"

# WebSocket Configuration
websocket:
  endpoint: /ws
  topic: /topic/stock-updates

# Logging Configuration
logging:
  level:
    com.financial.analytics: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
  file:
    name: logs/financial-analytics.log
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
